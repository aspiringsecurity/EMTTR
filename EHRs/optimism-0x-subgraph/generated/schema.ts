// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Fee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("recipient", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("feeData", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Fee entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Fee", id.toString(), this);
    }
  }

  static load(id: string): Fee | null {
    return changetype<Fee | null>(store.get("Fee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get feeData(): Bytes {
    let value = this.get("feeData");
    return value!.toBytes();
  }

  set feeData(value: Bytes) {
    this.set("feeData", Value.fromBytes(value));
  }
}

export class Property extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("propertyValidator", Value.fromBytes(Bytes.empty()));
    this.set("propertyData", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Property entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Property entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Property", id.toString(), this);
    }
  }

  static load(id: string): Property | null {
    return changetype<Property | null>(store.get("Property", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get propertyValidator(): Bytes {
    let value = this.get("propertyValidator");
    return value!.toBytes();
  }

  set propertyValidator(value: Bytes) {
    this.set("propertyValidator", Value.fromBytes(value));
  }

  get propertyData(): Bytes {
    let value = this.get("propertyData");
    return value!.toBytes();
  }

  set propertyData(value: Bytes) {
    this.set("propertyData", Value.fromBytes(value));
  }
}

export class Erc721Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("direction", Value.fromI32(0));
    this.set("maker", Value.fromBytes(Bytes.empty()));
    this.set("taker", Value.fromBytes(Bytes.empty()));
    this.set("expiry", Value.fromBigInt(BigInt.zero()));
    this.set("nonce", Value.fromBigInt(BigInt.zero()));
    this.set("erc20Token", Value.fromBytes(Bytes.empty()));
    this.set("erc20TokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("fees", Value.fromStringArray(new Array(0)));
    this.set("erc721Token", Value.fromBytes(Bytes.empty()));
    this.set("erc721TokenId", Value.fromBigInt(BigInt.zero()));
    this.set("erc721TokenProperties", Value.fromStringArray(new Array(0)));
    this.set("logIndex", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Erc721Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Erc721Order entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Erc721Order", id.toString(), this);
    }
  }

  static load(id: string): Erc721Order | null {
    return changetype<Erc721Order | null>(store.get("Erc721Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get direction(): i32 {
    let value = this.get("direction");
    return value!.toI32();
  }

  set direction(value: i32) {
    this.set("direction", Value.fromI32(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value!.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get erc20Token(): Bytes {
    let value = this.get("erc20Token");
    return value!.toBytes();
  }

  set erc20Token(value: Bytes) {
    this.set("erc20Token", Value.fromBytes(value));
  }

  get erc20TokenAmount(): BigInt {
    let value = this.get("erc20TokenAmount");
    return value!.toBigInt();
  }

  set erc20TokenAmount(value: BigInt) {
    this.set("erc20TokenAmount", Value.fromBigInt(value));
  }

  get fees(): Array<string> {
    let value = this.get("fees");
    return value!.toStringArray();
  }

  set fees(value: Array<string>) {
    this.set("fees", Value.fromStringArray(value));
  }

  get erc721Token(): Bytes {
    let value = this.get("erc721Token");
    return value!.toBytes();
  }

  set erc721Token(value: Bytes) {
    this.set("erc721Token", Value.fromBytes(value));
  }

  get erc721TokenId(): BigInt {
    let value = this.get("erc721TokenId");
    return value!.toBigInt();
  }

  set erc721TokenId(value: BigInt) {
    this.set("erc721TokenId", Value.fromBigInt(value));
  }

  get erc721TokenProperties(): Array<string> {
    let value = this.get("erc721TokenProperties");
    return value!.toStringArray();
  }

  set erc721TokenProperties(value: Array<string>) {
    this.set("erc721TokenProperties", Value.fromStringArray(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Erc1155Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("direction", Value.fromI32(0));
    this.set("maker", Value.fromBytes(Bytes.empty()));
    this.set("taker", Value.fromBytes(Bytes.empty()));
    this.set("expiry", Value.fromBigInt(BigInt.zero()));
    this.set("nonce", Value.fromBigInt(BigInt.zero()));
    this.set("erc20Token", Value.fromBytes(Bytes.empty()));
    this.set("erc20TokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("fees", Value.fromStringArray(new Array(0)));
    this.set("erc1155Token", Value.fromBytes(Bytes.empty()));
    this.set("erc1155TokenId", Value.fromBigInt(BigInt.zero()));
    this.set("erc1155TokenProperties", Value.fromStringArray(new Array(0)));
    this.set("erc1155TokenAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Erc1155Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Erc1155Order entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Erc1155Order", id.toString(), this);
    }
  }

  static load(id: string): Erc1155Order | null {
    return changetype<Erc1155Order | null>(store.get("Erc1155Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get direction(): i32 {
    let value = this.get("direction");
    return value!.toI32();
  }

  set direction(value: i32) {
    this.set("direction", Value.fromI32(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value!.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get erc20Token(): Bytes {
    let value = this.get("erc20Token");
    return value!.toBytes();
  }

  set erc20Token(value: Bytes) {
    this.set("erc20Token", Value.fromBytes(value));
  }

  get erc20TokenAmount(): BigInt {
    let value = this.get("erc20TokenAmount");
    return value!.toBigInt();
  }

  set erc20TokenAmount(value: BigInt) {
    this.set("erc20TokenAmount", Value.fromBigInt(value));
  }

  get fees(): Array<string> {
    let value = this.get("fees");
    return value!.toStringArray();
  }

  set fees(value: Array<string>) {
    this.set("fees", Value.fromStringArray(value));
  }

  get erc1155Token(): Bytes {
    let value = this.get("erc1155Token");
    return value!.toBytes();
  }

  set erc1155Token(value: Bytes) {
    this.set("erc1155Token", Value.fromBytes(value));
  }

  get erc1155TokenId(): BigInt {
    let value = this.get("erc1155TokenId");
    return value!.toBigInt();
  }

  set erc1155TokenId(value: BigInt) {
    this.set("erc1155TokenId", Value.fromBigInt(value));
  }

  get erc1155TokenProperties(): Array<string> {
    let value = this.get("erc1155TokenProperties");
    return value!.toStringArray();
  }

  set erc1155TokenProperties(value: Array<string>) {
    this.set("erc1155TokenProperties", Value.fromStringArray(value));
  }

  get erc1155TokenAmount(): BigInt {
    let value = this.get("erc1155TokenAmount");
    return value!.toBigInt();
  }

  set erc1155TokenAmount(value: BigInt) {
    this.set("erc1155TokenAmount", Value.fromBigInt(value));
  }
}

export class Erc721Cancellation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("maker", Value.fromBytes(Bytes.empty()));
    this.set("nonce", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Erc721Cancellation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Erc721Cancellation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Erc721Cancellation", id.toString(), this);
    }
  }

  static load(id: string): Erc721Cancellation | null {
    return changetype<Erc721Cancellation | null>(
      store.get("Erc721Cancellation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }
}

export class Erc1155Cancellation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("maker", Value.fromBytes(Bytes.empty()));
    this.set("nonce", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Erc1155Cancellation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Erc1155Cancellation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Erc1155Cancellation", id.toString(), this);
    }
  }

  static load(id: string): Erc1155Cancellation | null {
    return changetype<Erc1155Cancellation | null>(
      store.get("Erc1155Cancellation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }
}
