{
  "address": "0x7Ad742014d0c6f9e8c031930b04281b013A1ea7C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_predictionMarket",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PM_InvalidPredictionId",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictionId",
          "type": "uint256"
        }
      ],
      "name": "concludePrediction_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predictionMarketContract",
      "outputs": [
        {
          "internalType": "contract IPredictionMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8aa5244aa8926bcd1a615fcf544b4c13298ef583b4b5e65d448a8f8d866ef66b",
  "receipt": {
    "to": null,
    "from": "0x76189FbFac7802af49160765F020274601581E42",
    "contractAddress": "0x7Ad742014d0c6f9e8c031930b04281b013A1ea7C",
    "transactionIndex": 1,
    "gasUsed": "558495",
    "logsBloom": "0x
    "blockHash": "0x099b2fda712b4e35f5e7da1f5ab0cd470a74d198d0e0196ef78b587d5f4d31f6",
    "transactionHash": "0x8aa5244aa8926bcd1a615fcf544b4c13298ef583b4b5e65d448a8f8d866ef66b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 44530933,
        "transactionHash": "0x8aa5244aa8926bcd1a615fcf544b4c13298ef583b4b5e65d448a8f8d866ef66b",
        "address": "0x7Ad742014d0c6f9e8c031930b04281b013A1ea7C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000076189fbfac7802af49160765f020274601581e42"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x099b2fda712b4e35f5e7da1f5ab0cd470a74d198d0e0196ef78b587d5f4d31f6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 44530933,
        "transactionHash": "0x8aa5244aa8926bcd1a615fcf544b4c13298ef583b4b5e65d448a8f8d866ef66b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000076189fbfac7802af49160765f020274601581e42",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000008df981b1454ec000000000000000000000000000000000000000000000000109fa283d6b86f990000000000000000000000000000000000000000000035d1daf06be5f327bd250000000000000000000000000000000000000000000000001096c2ebbba41aad0000000000000000000000000000000000000000000035d1daf94b7e0e3c1211",
        "logIndex": 5,
        "blockHash": "0x099b2fda712b4e35f5e7da1f5ab0cd470a74d198d0e0196ef78b587d5f4d31f6"
      }
    ],
    "blockNumber": 44530933,
    "cumulativeGasUsed": "740578",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67E6563968b571d6703A4F7dBa8FF1B4AFCf21F2"
  ],
  "numDeployments": 1,
  "solcInputHash": "57ebe01f1f9c27735021162f66e3b0dc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_predictionMarket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PM_InvalidPredictionId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"concludePrediction_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictionMarketContract\",\"outputs\":[{\"internalType\":\"contract IPredictionMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract is inherently a data feed reader\",\"kind\":\"dev\",\"methods\":{\"concludePrediction_1(uint256)\":{\"details\":\"We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction. Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC, Cloud-based scheduler.Personally think that the 1st and 3rd options are good candidates.\",\"params\":{\"_predictionId\":\"The unique identifier for the prediction to be concluded.\"}},\"constructor\":{\"params\":{\"_predictionMarket\":\"The Trading Contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"predictionMarketContract()\":{\"notice\":\"The PredictionMarket contract that acts as a middle ground for Settlement and MarketHandler\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/Settlement.sol\":\"PM_Settlement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@api3/airnode-protocol-v1/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev See DapiProxy.sol for comments about usage\\ninterface IProxy {\\n    function read() external view returns (int224 value, uint32 timestamp);\\n\\n    function api3ServerV1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3ad69ef6ff3de4056ec43eb8b47465f3d896f88e95cfffb909a6d057b91db17b\",\"license\":\"MIT\"},\"@api3/contracts/v0.8/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@api3/airnode-protocol-v1/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\\\";\\n\",\"keccak256\":\"0x46e0969d4682b2dad5c56a5f278ee447a3085fcc66c4e8bd261ef9cdcccfdc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/common/Settlement.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@api3/contracts/v0.8/interfaces/IProxy.sol\\\";\\n\\n/// @dev Current order of settling a market :\\n/// Settlement : concludePrediction_1 -> PredictionMarket : conludePrediction_2 -> Each Unique MarketHandler : concludePrediction_3\\n\\n/// @notice We need to track certain properties of the prediction to make sure it it concluded after the deadline only.\\nstruct Prediction {\\n    string tokenSymbol;\\n    int224 targetPricePoint;\\n    bool isAbove;\\n    address proxyAddress;\\n    uint256 fee;\\n    uint256 timestamp;\\n    uint256 deadline;\\n    bool isActive;\\n    address marketHandler;\\n}\\n\\ninterface IPredictionMarket {\\n    function concludePrediction_2(uint256, bool, address, int224) external;\\n\\n    function getNextPredictionId() external view returns (uint256);\\n\\n    function getPrediction(uint256) external view returns (Prediction memory);\\n}\\n\\nerror PM_InvalidPredictionId();\\n\\n/// @dev The contract is inherently a data feed reader\\ncontract PM_Settlement is Ownable {\\n    /// @notice The PredictionMarket contract that acts as a middle ground for Settlement and MarketHandler\\n    IPredictionMarket public predictionMarketContract;\\n\\n    /// @param _predictionMarket The Trading Contract\\n    constructor(address _predictionMarket) {\\n        predictionMarketContract = IPredictionMarket(_predictionMarket);\\n    }\\n\\n    modifier isValidPredictionId(uint256 _id) {\\n        uint256 currentUpper = predictionMarketContract.getNextPredictionId();\\n        if (_id >= currentUpper) revert PM_InvalidPredictionId();\\n        _;\\n    }\\n\\n    /// @dev We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction.\\n    /// Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC,\\n    /// Cloud-based scheduler.\\n    /// @dev Personally think that the 1st and 3rd options are good candidates.\\n    /// @param _predictionId The unique identifier for the prediction to be concluded.\\n    function concludePrediction_1(\\n        uint256 _predictionId\\n    ) external isValidPredictionId(_predictionId) {\\n        Prediction memory associatedPrediction = predictionMarketContract\\n            .getPrediction(_predictionId);\\n        address associatedProxyAddress = associatedPrediction.proxyAddress;\\n\\n        /// API3 FTW\\n        (int224 value, ) = IProxy(associatedProxyAddress).read();\\n\\n        require(\\n            block.timestamp > associatedPrediction.deadline,\\n            \\\"Can't run evaluation! Deadline not met.\\\"\\n        );\\n\\n        /// @dev The price was predicted to be above the target point\\n        if (associatedPrediction.isAbove) {\\n            /// @dev And IS ABOVE the target and hence True\\n            if (associatedPrediction.targetPricePoint <= value)\\n                predictionMarketContract.concludePrediction_2(\\n                    _predictionId,\\n                    true,\\n                    _msgSender(),\\n                    value\\n                );\\n            else\\n                predictionMarketContract.concludePrediction_2(\\n                    _predictionId,\\n                    false,\\n                    _msgSender(),\\n                    value\\n                );\\n            /// @dev The price was predicted to be below the target point\\n        } else {\\n            /// @dev And IS BELOW the target and hence True\\n            if (associatedPrediction.targetPricePoint > value)\\n                predictionMarketContract.concludePrediction_2(\\n                    _predictionId,\\n                    true,\\n                    _msgSender(),\\n                    value\\n                );\\n            else\\n                predictionMarketContract.concludePrediction_2(\\n                    _predictionId,\\n                    false,\\n                    _msgSender(),\\n                    value\\n                );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8203b2e6e68437ff5459349eaac7f50e4066ec082fd88a4327ba7b9a87b9dee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161092a38038061092a83398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b61083e806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631c5ecf651461005c578063715018a6146100715780638da5cb5b14610079578063b15a9dd2146100a2578063f2fde38b146100b5575b600080fd5b61006f61006a366004610528565b6100c8565b005b61006f6103f1565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b600154610086906001600160a01b031681565b61006f6100c3366004610556565b610405565b806000600160009054906101000a90046001600160a01b03166001600160a01b0316633dcab2386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610142919061057a565b905080821061016457604051638c3b1e5960e01b815260040160405180910390fd5b600154604051637f41df6760e11b8152600481018590526000916001600160a01b03169063fe83bece90602401600060405180830381865afa1580156101ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d691908101906106bb565b90506000816060015190506000816001600160a01b03166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa158015610220573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024491906107a1565b5090508260c0015142116102af5760405162461bcd60e51b815260206004820152602760248201527f43616e27742072756e206576616c756174696f6e2120446561646c696e65206e60448201526637ba1036b2ba1760c91b60648201526084015b60405180910390fd5b8260400151156103535780601b0b8360200151601b0b1361033957600180546001600160a01b03169063b909f6ba908890335b856040518563ffffffff1660e01b815260040161030294939291906107e1565b600060405180830381600087803b15801561031c57600080fd5b505af1158015610330573d6000803e3d6000fd5b505050506103e9565b6001546001600160a01b031663b909f6ba876000336102e2565b80601b0b8360200151601b0b131561038157600180546001600160a01b03169063b909f6ba908890336102e2565b6001546001600160a01b031663b909f6ba87600033856040518563ffffffff1660e01b81526004016103b694939291906107e1565b600060405180830381600087803b1580156103d057600080fd5b505af11580156103e4573d6000803e3d6000fd5b505050505b505050505050565b6103f961047e565b61040360006104d8565b565b61040d61047e565b6001600160a01b0381166104725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a6565b61047b816104d8565b50565b6000546001600160a01b031633146104035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561053a57600080fd5b5035919050565b6001600160a01b038116811461047b57600080fd5b60006020828403121561056857600080fd5b813561057381610541565b9392505050565b60006020828403121561058c57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156105cd576105cd610593565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105fc576105fc610593565b604052919050565b600082601f83011261061557600080fd5b815167ffffffffffffffff81111561062f5761062f610593565b6020610643601f8301601f191682016105d3565b828152858284870101111561065757600080fd5b60005b8381101561067557858101830151828201840152820161065a565b506000928101909101919091529392505050565b8051601b81900b811461069b57600080fd5b919050565b8051801515811461069b57600080fd5b805161069b81610541565b6000602082840312156106cd57600080fd5b815167ffffffffffffffff808211156106e557600080fd5b9083019061012082860312156106fa57600080fd5b6107026105a9565b82518281111561071157600080fd5b61071d87828601610604565b82525061072c60208401610689565b602082015261073d604084016106a0565b604082015261074e606084016106b0565b60608201526080830151608082015260a083015160a082015260c083015160c082015261077d60e084016106a0565b60e082015261010091506107928284016106b0565b91810191909152949350505050565b600080604083850312156107b457600080fd5b6107bd83610689565b9150602083015163ffffffff811681146107d657600080fd5b809150509250929050565b93845291151560208401526001600160a01b03166040830152601b0b60608201526080019056fea2646970667358221220d8119e4be13362123bc724040f4493234caec90dd92933435f141ae4db7b7a3364736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631c5ecf651461005c578063715018a6146100715780638da5cb5b14610079578063b15a9dd2146100a2578063f2fde38b146100b5575b600080fd5b61006f61006a366004610528565b6100c8565b005b61006f6103f1565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b600154610086906001600160a01b031681565b61006f6100c3366004610556565b610405565b806000600160009054906101000a90046001600160a01b03166001600160a01b0316633dcab2386040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610142919061057a565b905080821061016457604051638c3b1e5960e01b815260040160405180910390fd5b600154604051637f41df6760e11b8152600481018590526000916001600160a01b03169063fe83bece90602401600060405180830381865afa1580156101ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d691908101906106bb565b90506000816060015190506000816001600160a01b03166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa158015610220573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024491906107a1565b5090508260c0015142116102af5760405162461bcd60e51b815260206004820152602760248201527f43616e27742072756e206576616c756174696f6e2120446561646c696e65206e60448201526637ba1036b2ba1760c91b60648201526084015b60405180910390fd5b8260400151156103535780601b0b8360200151601b0b1361033957600180546001600160a01b03169063b909f6ba908890335b856040518563ffffffff1660e01b815260040161030294939291906107e1565b600060405180830381600087803b15801561031c57600080fd5b505af1158015610330573d6000803e3d6000fd5b505050506103e9565b6001546001600160a01b031663b909f6ba876000336102e2565b80601b0b8360200151601b0b131561038157600180546001600160a01b03169063b909f6ba908890336102e2565b6001546001600160a01b031663b909f6ba87600033856040518563ffffffff1660e01b81526004016103b694939291906107e1565b600060405180830381600087803b1580156103d057600080fd5b505af11580156103e4573d6000803e3d6000fd5b505050505b505050505050565b6103f961047e565b61040360006104d8565b565b61040d61047e565b6001600160a01b0381166104725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a6565b61047b816104d8565b50565b6000546001600160a01b031633146104035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561053a57600080fd5b5035919050565b6001600160a01b038116811461047b57600080fd5b60006020828403121561056857600080fd5b813561057381610541565b9392505050565b60006020828403121561058c57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156105cd576105cd610593565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105fc576105fc610593565b604052919050565b600082601f83011261061557600080fd5b815167ffffffffffffffff81111561062f5761062f610593565b6020610643601f8301601f191682016105d3565b828152858284870101111561065757600080fd5b60005b8381101561067557858101830151828201840152820161065a565b506000928101909101919091529392505050565b8051601b81900b811461069b57600080fd5b919050565b8051801515811461069b57600080fd5b805161069b81610541565b6000602082840312156106cd57600080fd5b815167ffffffffffffffff808211156106e557600080fd5b9083019061012082860312156106fa57600080fd5b6107026105a9565b82518281111561071157600080fd5b61071d87828601610604565b82525061072c60208401610689565b602082015261073d604084016106a0565b604082015261074e606084016106b0565b60608201526080830151608082015260a083015160a082015260c083015160c082015261077d60e084016106a0565b60e082015261010091506107928284016106b0565b91810191909152949350505050565b600080604083850312156107b457600080fd5b6107bd83610689565b9150602083015163ffffffff811681146107d657600080fd5b809150509250929050565b93845291151560208401526001600160a01b03166040830152601b0b60608201526080019056fea2646970667358221220d8119e4be13362123bc724040f4493234caec90dd92933435f141ae4db7b7a3364736f6c63430008120033",
  "devdoc": {
    "details": "The contract is inherently a data feed reader",
    "kind": "dev",
    "methods": {
      "concludePrediction_1(uint256)": {
        "details": "We can add an incentive to whoever calls it get some % of overall protocol fee for a given prediction. Note that this should come out > gas fee to run the txn in the first place. Or we use CRON job, EAC, Cloud-based scheduler.Personally think that the 1st and 3rd options are good candidates.",
        "params": {
          "_predictionId": "The unique identifier for the prediction to be concluded."
        }
      },
      "constructor": {
        "params": {
          "_predictionMarket": "The Trading Contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "predictionMarketContract()": {
        "notice": "The PredictionMarket contract that acts as a middle ground for Settlement and MarketHandler"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/common/Settlement.sol:PM_Settlement",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1698,
        "contract": "contracts/common/Settlement.sol:PM_Settlement",
        "label": "predictionMarketContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPredictionMarket)1689"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPredictionMarket)1689": {
        "encoding": "inplace",
        "label": "contract IPredictionMarket",
        "numberOfBytes": "20"
      }
    }
  }
}