import {
  useCallback,
  useEffect,
  useRef,
  useState,
} from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';
import { useAuth } from 'react-oidc-context';
import '../style/FileViewer.css';

const VIEWER_ID = 'file-viewer-root';

function FileViewer({ closeDialog, publicationData }) {
  const { user } = useAuth();
  const [bravaApi, setBravaApi] = useState(null);
  const didMountRef = useRef(false);
  const publicationStatus = 'Complete';

  const loadBravaViewer = useCallback(() => {
    axios
      .get(
        `${process.env.REACT_APP_BASE_SERVICE_URL}/viewer/api/v1/viewers/brava-view-1.x/loader`,
        {
          headers: {
            Authorization: `Bearer ${user.access_token}`,
          },
        },
      )
      .then((res) => {
        if (res.data) {
          const scriptEl = document.createElement('script');
          scriptEl.appendChild(document.createTextNode(res.data));
          document.getElementsByTagName('head')[0].appendChild(scriptEl);
        }
      });
  }, [user.access_token]);

  const closeDialogEventListener = () => {
    closeDialog();
  };

  const bravaReadyEventListener = (event) => {
    const currentOrigin = window.location.origin;
    if (event.origin && event.origin !== currentOrigin) {
      return;
    }
    if (event.target && event.target.origin === currentOrigin) {
      window.addEventListener(`${event.detail}-close`, closeDialogEventListener);
      setBravaApi(window[event.detail]);
    }
  };

  useEffect(() => {
    if (didMountRef.current) {
      if (bravaApi) {
        bravaApi.setHttpHeaders({
          Authorization: `Bearer ${user.access_token}`,
        });
        bravaApi.addPublication(publicationData, true);
        bravaApi.render(VIEWER_ID);
      }
    } else {
      window.addEventListener('bravaReady', bravaReadyEventListener);
      loadBravaViewer();
      didMountRef.current = true;
    }
  }, [
    bravaApi,
    publicationData,
    user.access_token,
    loadBravaViewer,
  ]);

  if (publicationStatus !== 'Complete') {
    return null;
  }

  return <div id={VIEWER_ID} />;
}

FileViewer.propTypes = {
  closeDialog: PropTypes.func.isRequired,
  // eslint-disable-next-line react/forbid-prop-types
  publicationData: PropTypes.any.isRequired,
};

export default FileViewer;
