{
  "f_type": "InteractionTemplate",
  "f_version": "1.0.0",
  "id": "d3357810579ec9dc5dcad55d660f501bcffa0daa8b0e4c43e9d82fe17adcc437",
  "data": {
    "type": "transaction",
    "interface": "",
    "messages": {
      "title": {
        "i18n": {
          "en-US": "This transaction facilitates the purchase of a listed FlowverseSocks NFT with the StorefrontV2 contract"
        }
      }
    },
    "cadence": "import FlowverseSocks01 from 0xFlowverseSocks01\nimport NonFungibleToken from 0xNonFungibleToken\nimport MetadataViews from 0xMetadataViews\nimport FlowToken from 0xFlowToken\nimport FungibleToken from 0xFungibleToken\nimport NFTStorefrontV2 from 0xNFTStorefrontV2\n// This transaction was auto-generated with the NFT Catalog (https://github.com/dapperlabs/nft-catalog)\n//\n// This transaction facilitates the purchase of a listed NFT with the StorefrontV2 contract \n// \n// Collection Identifier: FlowverseSocks\n// Vault Identifier: flow\n//\n// Version: 0.1.1\n\ntransaction(listingResourceID: UInt64, storefrontAddress: Address, commissionRecipient: Address?) {\n    /// `listingResourceID` - ID of the Storefront listing resource\n    /// `storefrontAddress` - The address that owns the storefront listing\n    /// `commissionRecipient` - Optional recipient for transaction commission if comission exists.\n    let paymentVault: @FungibleToken.Vault\n    let nftCollection: &FlowverseSocks01.Collection{NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,FlowverseSocks01.FlowverseSocks01CollectionPublic,MetadataViews.ResolverCollection}\n    let storefront: &NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}\n    let listing: &NFTStorefrontV2.Listing{NFTStorefrontV2.ListingPublic}\n    var commissionRecipientCap: Capability<&{FungibleToken.Receiver}>?\n\n    prepare(acct: AuthAccount) {\n        self.commissionRecipientCap = nil\n\n        // Set up NFT to make sure this account has NFT setup correctly\n        if acct.borrow<&FlowverseSocks01.Collection>(from: /storage/MatrixMarketFlowverseSocks01Collection) == nil {\n            let collection <- FlowverseSocks01.createEmptyCollection()\n            acct.save(<-collection, to: /storage/MatrixMarketFlowverseSocks01Collection)\n            }\n        if (acct.getCapability<&FlowverseSocks01.Collection{NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,FlowverseSocks01.FlowverseSocks01CollectionPublic,MetadataViews.ResolverCollection}>(/public/MatrixMarketFlowverseSocks01Collection).borrow() == nil) {\n            acct.unlink(/public/MatrixMarketFlowverseSocks01Collection)\n            acct.link<&FlowverseSocks01.Collection{NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,FlowverseSocks01.FlowverseSocks01CollectionPublic,MetadataViews.ResolverCollection}>(/public/MatrixMarketFlowverseSocks01Collection, target: /storage/MatrixMarketFlowverseSocks01Collection)\n        }\n\n        if (acct.getCapability<&FlowverseSocks01.Collection{NonFungibleToken.Provider,NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,FlowverseSocks01.FlowverseSocks01CollectionPublic,MetadataViews.ResolverCollection}>(/private/FlowverseSocks01Collection).borrow() == nil) {\n            acct.unlink(/private/FlowverseSocks01Collection)\n            acct.link<&FlowverseSocks01.Collection{NonFungibleToken.Provider,NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,FlowverseSocks01.FlowverseSocks01CollectionPublic,MetadataViews.ResolverCollection}>(/private/FlowverseSocks01Collection, target: /storage/MatrixMarketFlowverseSocks01Collection)\n        }\n        \n        // Access the storefront public resource of the seller to purchase the listing.\n        self.storefront = getAccount(storefrontAddress)\n            .getCapability<&NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}>(\n                NFTStorefrontV2.StorefrontPublicPath\n            )!\n            .borrow()\n            ?? panic(\"Could not borrow Storefront from provided address\")\n\n        // Borrow the listing\n        self.listing = self.storefront.borrowListing(listingResourceID: listingResourceID)\n                    ?? panic(\"No Offer with that ID in Storefront\")\n        let price = self.listing.getDetails().salePrice\n\n        // Access the vault of the buyer to pay the sale price of the listing.\n        let mainFTVault = acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Cannot borrow Fungible Token vault from acct storage\")\n        self.paymentVault <- mainFTVault.withdraw(amount: price)\n\n        // Access the buyer's NFT collection to store the purchased NFT.\n        self.nftCollection = acct.borrow<&FlowverseSocks01.Collection{NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,FlowverseSocks01.FlowverseSocks01CollectionPublic,MetadataViews.ResolverCollection}>(\n            from: /storage/MatrixMarketFlowverseSocks01Collection\n        ) ?? panic(\"Cannot borrow NFT collection receiver from account\")\n\n        // Fetch the commission amt.\n        let commissionAmount = self.listing.getDetails().commissionAmount\n\n        if commissionRecipient != nil && commissionAmount != 0.0 {\n            // Access the capability to receive the commission.\n            let _commissionRecipientCap = getAccount(commissionRecipient!).getCapability<&{FungibleToken.Receiver}>(/public/flow)\n            assert(_commissionRecipientCap.check(), message: \"Commission Recipient doesn't have flowtoken receiving capability\")\n            self.commissionRecipientCap = _commissionRecipientCap\n        } else if commissionAmount == 0.0 {\n            self.commissionRecipientCap = nil\n        } else {\n            panic(\"Commission recipient can not be empty when commission amount is non zero\")\n        }\n    }\n\n    execute {\n        // Purchase the NFT\n        let item <- self.listing.purchase(\n            payment: <-self.paymentVault,\n            commissionRecipient: self.commissionRecipientCap\n        )\n        // Deposit the NFT in the buyer's collection.\n        self.nftCollection.deposit(token: <-item)\n    }\n}\n",
    "dependencies": {
      "0xNonFungibleToken": {
        "NonFungibleToken": {
          "testnet": {
            "address": "0x631e88ae7f1d7c20",
            "contract": "NonFungibleToken",
            "fq_address": "A.0x631e88ae7f1d7c20.NonFungibleToken",
            "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
            "pin_block_height": 95784004
          }
        }
      },
      "0xMetadataViews": {
        "MetadataViews": {
          "testnet": {
            "address": "0x631e88ae7f1d7c20",
            "contract": "MetadataViews",
            "fq_address": "A.0x631e88ae7f1d7c20.MetadataViews",
            "pin": "ba061d95016d5506e9f5d1afda15d82eb066aa8b0552e8b26dc7950fa5714d51",
            "pin_block_height": 95784009
          }
        }
      },
      "0xFlowToken": {
        "FlowToken": {
          "testnet": {
            "address": "0x7e60df042a9c0868",
            "contract": "FlowToken",
            "fq_address": "A.0x7e60df042a9c0868.FlowToken",
            "pin": "0326c320322c4e8dde768ba2975c384184fb7e41765c2c87e79a2040bfc71be8",
            "pin_block_height": 95784010
          }
        }
      },
      "0xFungibleToken": {
        "FungibleToken": {
          "testnet": {
            "address": "0x9a0766d93b6608b7",
            "contract": "FungibleToken",
            "fq_address": "A.0x9a0766d93b6608b7.FungibleToken",
            "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
            "pin_block_height": 95784011
          }
        }
      },
      "0xNFTStorefrontV2": {
        "NFTStorefrontV2": {
          "testnet": {
            "address": "0x2d55b98eb200daef",
            "contract": "NFTStorefrontV2",
            "fq_address": "A.0x2d55b98eb200daef.NFTStorefrontV2",
            "pin": "ba061d95016d5506e9f5d1afda15d82eb066aa8b0552e8b26dc7950fa5714d51",
            "pin_block_height": 95784016
          }
        }
      },
      "0xFlowverseSocks01": {
        "FlowverseSocks01": {
          "testnet": {
            "address": "0x7f3812b53dd4de20",
            "contract": "FlowverseSocks01",
            "fq_address": "A.0x7f3812b53dd4de20.FlowverseSocks01",
            "pin": "9524cc8b5eb8bb8f7d8cf4ee3c65374cafa55921d31d6f72ce08d1c4da8aad57",
            "pin_block_height": 95784025
          }
        }
      }
    },
    "arguments": {
      "listingResourceID": {
        "index": 0,
        "type": "UInt64",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "ID of the Storefront listing resource"
            }
          }
        }
      },
      "storefrontAddress": {
        "index": 1,
        "type": "Address",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "The address that owns the storefront listing"
            }
          }
        }
      },
      "commissionRecipient": {
        "index": 2,
        "type": "Address?",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "Optional recipient for transaction commission if comission exists"
            }
          }
        }
      }
    }
  }
}