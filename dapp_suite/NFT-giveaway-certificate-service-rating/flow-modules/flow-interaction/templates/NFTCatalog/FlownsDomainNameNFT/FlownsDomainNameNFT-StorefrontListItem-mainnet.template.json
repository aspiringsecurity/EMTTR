{
  "f_type": "InteractionTemplate",
  "f_version": "1.0.0",
  "id": "25dd7df58477311d3263046ae68eabb26bb29dff4ae1b5b8b9a46d7e2910a9f5",
  "data": {
    "type": "transaction",
    "interface": "",
    "messages": {
      "title": {
        "i18n": {
          "en-US": "This transaction facilitates the listing of a FlownsDomainNameNFT NFT with the StorefrontV2 contract"
        }
      }
    },
    "cadence": "import Domains from 0xDomains\nimport NonFungibleToken from 0xNonFungibleToken\nimport MetadataViews from 0xMetadataViews\nimport FlowToken from 0xFlowToken\nimport FungibleToken from 0xFungibleToken\nimport NFTStorefrontV2 from 0xNFTStorefrontV2\n// This transaction was auto-generated with the NFT Catalog (https://github.com/dapperlabs/nft-catalog)\n//\n// This transaction facilitates the listing of an NFT with the StorefrontV2 contract\n// \n// Collection Identifier: FlownsDomainNameNFT\n// Vault Identifier: flow\n//\n// Version: 0.1.1\n\ntransaction(saleItemID: UInt64, saleItemPrice: UFix64, customID: String?, commissionAmount: UFix64, expiry: UInt64, marketplacesAddress: [Address]) {\n    /// `saleItemID` - ID of the NFT that is put on sale by the seller.\n    /// `saleItemPrice` - Amount of tokens (FT) buyer needs to pay for the purchase of listed NFT.\n    /// `customID` - Optional string to represent identifier of the dapp.\n    /// `commissionAmount` - Commission amount that will be taken away by the purchase facilitator.\n    /// `expiry` - Unix timestamp at which created listing become expired.\n    /// `marketplacesAddress` - List of addresses that are allowed to get the commission.\n    let ftReceiver: Capability<&AnyResource{FungibleToken.Receiver}>\n    let nftProvider: Capability<&AnyResource{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>\n    let storefront: &NFTStorefrontV2.Storefront\n    var saleCuts: [NFTStorefrontV2.SaleCut]\n    var marketplacesCapability: [Capability<&AnyResource{FungibleToken.Receiver}>]\n\n    prepare(acct: AuthAccount) {\n        self.saleCuts = []\n        self.marketplacesCapability = []\n\n        // Set up FT to make sure this account can receive the proper currency\n        if acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault) == nil {\n            let vault <- FlowToken.createEmptyVault()\n            acct.save(<-vault, to: /storage/flowTokenVault)\n        }\n\n        if acct.getCapability<&FlowToken.Vault{FungibleToken.Receiver,FungibleToken.Balance}>(/public/flow).borrow() == nil {\n            acct.unlink(/public/flow)\n            acct.link<&FlowToken.Vault{FungibleToken.Receiver,FungibleToken.Balance}>(/public/flow,target: /storage/flowTokenVault)\n        }\n        \n        // Set up NFT to make sure this account has NFT setup correctly\n        if acct.borrow<&Domains.Collection>(from: /storage/fnsDomainCollection) == nil {\n            let collection <- Domains.createEmptyCollection()\n            acct.save(<-collection, to: /storage/fnsDomainCollection)\n        }\n        if (acct.getCapability<&Domains.Collection{Domains.CollectionPublic,NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,MetadataViews.ResolverCollection}>(/public/fnsDomainCollection).borrow() == nil) {\n            acct.unlink(/public/fnsDomainCollection)\n            acct.link<&Domains.Collection{Domains.CollectionPublic,NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,MetadataViews.ResolverCollection}>(/public/fnsDomainCollection, target: /storage/fnsDomainCollection)\n        }\n\n        if (acct.getCapability<&Domains.Collection{Domains.CollectionPublic,NonFungibleToken.CollectionPublic,NonFungibleToken.Provider,MetadataViews.ResolverCollection}>(/private/fnsDomainCollection).borrow() == nil) {\n            acct.unlink(/private/fnsDomainCollection)\n            acct.link<&Domains.Collection{Domains.CollectionPublic,NonFungibleToken.CollectionPublic,NonFungibleToken.Provider,MetadataViews.ResolverCollection}>(/private/fnsDomainCollection, target: /storage/fnsDomainCollection)\n        }\n\n        // Receiver for the sale cut.\n        self.ftReceiver = acct.getCapability<&{FungibleToken.Receiver}>(/public/flow)!\n        assert(self.ftReceiver.borrow() != nil, message: \"Missing or mis-typed Fungible Token receiver\")\n\n        self.nftProvider = acct.getCapability<&{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(/private/fnsDomainCollection)!\n        let collectionRef = acct\n            .getCapability(/public/fnsDomainCollection)\n            .borrow<&Domains.Collection{Domains.CollectionPublic,NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,MetadataViews.ResolverCollection}>()\n            ?? panic(\"Could not borrow a reference to the collection\")\n        var totalRoyaltyCut = 0.0\n        let effectiveSaleItemPrice = saleItemPrice - commissionAmount\n\n        let nft = collectionRef.borrowViewResolver(id: saleItemID)!       \n        if (nft.getViews().contains(Type<MetadataViews.Royalties>())) {\n            let royaltiesRef = nft.resolveView(Type<MetadataViews.Royalties>()) ?? panic(\"Unable to retrieve the royalties\")\n            let royalties = (royaltiesRef as! MetadataViews.Royalties).getRoyalties()\n            for royalty in royalties {\n                // TODO - Verify the type of the vault and it should exists\n                self.saleCuts.append(NFTStorefrontV2.SaleCut(receiver: royalty.receiver, amount: royalty.cut * effectiveSaleItemPrice))\n                totalRoyaltyCut = totalRoyaltyCut + royalty.cut * effectiveSaleItemPrice\n            }\n        }\n\n        // Append the cut for the seller.\n        self.saleCuts.append(NFTStorefrontV2.SaleCut(\n            receiver: self.ftReceiver,\n            amount: effectiveSaleItemPrice - totalRoyaltyCut\n        ))\n        assert(self.nftProvider.borrow() != nil, message: \"Missing or mis-typed nftProvider\")\n\n\n        if acct.borrow<&NFTStorefrontV2.Storefront>(from: NFTStorefrontV2.StorefrontStoragePath) == nil {\n            // Create a new empty Storefront\n            let storefront <- NFTStorefrontV2.createStorefront() as! @NFTStorefrontV2.Storefront\n            // save it to the account\n            acct.save(<-storefront, to: NFTStorefrontV2.StorefrontStoragePath)\n            // create a public capability for the Storefront\n            acct.link<&NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}>(NFTStorefrontV2.StorefrontPublicPath, target: NFTStorefrontV2.StorefrontStoragePath)\n        }\n        self.storefront = acct.borrow<&NFTStorefrontV2.Storefront>(from: NFTStorefrontV2.StorefrontStoragePath)\n            ?? panic(\"Missing or mis-typed NFTStorefront Storefront\")\n\n        for marketplace in marketplacesAddress {\n            self.marketplacesCapability.append(getAccount(marketplace).getCapability<&{FungibleToken.Receiver}>(/public/flow))\n        }\n    }\n\n    execute {\n        // Create listing\n        self.storefront.createListing(\n            nftProviderCapability: self.nftProvider,\n            nftType: Type<@Domains.NFT>(),\n            nftID: saleItemID,\n            salePaymentVaultType: Type<@FlowToken.Vault>(),\n            saleCuts: self.saleCuts,\n            marketplacesCapability: self.marketplacesCapability.length == 0 ? nil : self.marketplacesCapability,\n            customID: customID,\n            commissionAmount: commissionAmount,\n            expiry: expiry\n        )\n    }\n}\n",
    "dependencies": {
      "0xDomains": {
        "Domains": {
          "mainnet": {
            "address": "0x233eb012d34b0070",
            "contract": "Domains",
            "fq_address": "A.0x233eb012d34b0070.Domains",
            "pin": "bfeedef4b4548a7bab30ecf31c97eb781c67f2414b4913d5bb19e58aeebbc515",
            "pin_block_height": 47513184
          }
        }
      },
      "0xNonFungibleToken": {
        "NonFungibleToken": {
          "mainnet": {
            "address": "0x1d7e57aa55817448",
            "contract": "NonFungibleToken",
            "fq_address": "A.0x1d7e57aa55817448.NonFungibleToken",
            "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
            "pin_block_height": 47513187
          }
        }
      },
      "0xMetadataViews": {
        "MetadataViews": {
          "mainnet": {
            "address": "0x1d7e57aa55817448",
            "contract": "MetadataViews",
            "fq_address": "A.0x1d7e57aa55817448.MetadataViews",
            "pin": "ba061d95016d5506e9f5d1afda15d82eb066aa8b0552e8b26dc7950fa5714d51",
            "pin_block_height": 47513192
          }
        }
      },
      "0xFlowToken": {
        "FlowToken": {
          "mainnet": {
            "address": "0x1654653399040a61",
            "contract": "FlowToken",
            "fq_address": "A.0x1654653399040a61.FlowToken",
            "pin": "0326c320322c4e8dde768ba2975c384184fb7e41765c2c87e79a2040bfc71be8",
            "pin_block_height": 47513193
          }
        }
      },
      "0xFungibleToken": {
        "FungibleToken": {
          "mainnet": {
            "address": "0xf233dcee88fe0abe",
            "contract": "FungibleToken",
            "fq_address": "A.0xf233dcee88fe0abe.FungibleToken",
            "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
            "pin_block_height": 47513193
          }
        }
      },
      "0xNFTStorefrontV2": {
        "NFTStorefrontV2": {
          "mainnet": {
            "address": "0x4eb8a10cb9f87357",
            "contract": "NFTStorefrontV2",
            "fq_address": "A.0x4eb8a10cb9f87357.NFTStorefrontV2",
            "pin": "ba061d95016d5506e9f5d1afda15d82eb066aa8b0552e8b26dc7950fa5714d51",
            "pin_block_height": 47513198
          }
        }
      }
    },
    "arguments": {
      "saleItemID": {
        "index": 0,
        "type": "UInt64",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "ID of the NFT that is put on sale by the seller"
            }
          }
        }
      },
      "saleItemPrice": {
        "index": 1,
        "type": "UInt64",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "Amount of tokens (FT) buyer needs to pay for the purchase of listed NFT"
            }
          }
        }
      },
      "customID": {
        "index": 2,
        "type": "String?",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "Optional string to represent identifier of the dapp"
            }
          }
        }
      },
      "commissionAmount": {
        "index": 3,
        "type": "UFix64",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "Commission amount that will be taken away by the purchase facilitator"
            }
          }
        }
      },
      "expiry": {
        "index": 4,
        "type": "UFix64",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "Unix timestamp at which created listing become expired"
            }
          }
        }
      },
      "marketplacesAddress": {
        "index": 5,
        "type": "[Address]",
        "messages": {
          "title": {
            "i18n": {
              "en-US": "List of addresses that are allowed to get the commission"
            }
          }
        }
      }
    }
  }
}